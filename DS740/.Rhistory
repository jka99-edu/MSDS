auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
auto1 <- auto %>%
mutate(groups_vec = ifelse(random_groups == 1, TRUE, FALSE))
View(auto1)
auto1_train <- auto1 %>%
filter(in_train)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
filter(in_train)
auto_test <- auto %>%
filter(!in_train)
auto1_train <- auto %>%
filter(in_train)
auto1_test <- auto %>%
filter(!in_train)
auto1_train$year = scale(auto1_train$year)
auto1_train$weight = scale(auto1$weight)
#require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
#trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
echo = TRUE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
library(dplyr)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
filter(in_train)
auto1_test <- auto %>%
filter(!in_train)
auto1_train$year = scale(auto1_train$year)
auto1_train$weight = scale(auto1_train$weight)
#auto1_test$
#require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
#trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
echo = TRUE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
library(dplyr)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
filter(in_train)
auto1_test <- auto %>%
filter(!in_train)
auto1_train$year = scale(auto1_train$year)
auto1_train$weight = scale(auto1_train$weight)
auto1_test$year = scale(auto1_test$year,
center = attr(auto1_train$year, "scaled:center"),
scale = attr(auto1_train$year, "scaled:scale"))
auto1_test$weight = scale(auto1_test$weight,
center = attr(auto1_train$weight, "scaled:center"),
scale = attr(auto1_train$weight, "scaled:scale"))
in_train
predictions <- knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
#require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
#trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
echo = TRUE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
library(dplyr)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
filter(in_train)
auto1_test <- auto %>%
filter(!in_train)
auto1_train$year = scale(auto1_train$year)
auto1_train$weight = scale(auto1_train$weight)
auto1_test$year = scale(auto1_test$year,
center = attr(auto1_train$year, "scaled:center"),
scale = attr(auto1_train$year, "scaled:scale"))
auto1_test$weight = scale(auto1_test$weight,
center = attr(auto1_train$weight, "scaled:center"),
scale = attr(auto1_train$weight, "scaled:scale"))
predictions <- knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
2**3**4
2**4**3
predictions = knn.reg(train = x_train,
test  = x_test,
y = Boston$crim[in_train],
k = 25)
MSE = mean( (predictions$pred - Boston$crim[!in_train])^2 )
MSE
library(MASS)
library(dplyr)
library(ggplot2)
library(FNN)
set.seed(100)
neighborhoods = c(rep(1, 350), rep(2, 156))
random_groups = sample(neighborhoods, 506)
in_train = (random_groups == 1)
x_train <- Boston %>%
dplyr::select(c(age, rad)) %>%
filter(in_train)
x_test <- Boston %>%
dplyr::select(c(age, rad)) %>%
filter(!in_train)
# x_train = scale(x_train)
# attr(x_train, "scaled:center")
#attr(x_train, "scaled:scale")
#x_test = scale(x_test, center = attr(x_train, "scaled:center"), scale = attr(x_train, "scaled:scale"))
x_train = scale(x_train)
x_test = scale(x_test, center = attr(x_train, "scaled:center"),
scale = attr(x_train, "scaled:scale"))
predictions = knn.reg(train = x_train,
test  = x_test,
y = Boston$crim[in_train],
k = 25)
MSE = mean( (predictions$pred - Boston$crim[!in_train])^2 )
MSE
age_to_check = seq(20, 100, by = 1)
rad_to_check = c(seq(1, 8, by = 1), 24)
example_data = expand.grid(age_to_check,
rad_to_check)
example_data <- example_data %>%
rename(age = Var1,
rad = Var2)
x_example = scale(example_data,
center = attr(x_train, "scaled:center"),
scale = attr(x_train, "scaled:scale"))
predictions = knn.reg(train = x_train,
test  = x_example,
y = Boston$crim[in_train],
k = 25)
example_data <- example_data %>%
mutate(pred = predictions$pred)
example_data %>%
gf_point(rad ~ age, color =~ pred)
example_data %>%
filter(rad %in% c(1,8,24)) %>%
gf_line(pred ~ age, color =~ factor(rad))
#require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
#trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
echo = TRUE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
library(dplyr)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
filter(in_train)
auto1_test <- auto %>%
filter(!in_train)
auto1_train$year = scale(auto1_train$year)
auto1_train$weight = scale(auto1_train$weight)
auto1_test$year = scale(auto1_test$year,
center = attr(auto1_train$year, "scaled:center"),
scale = attr(auto1_train$year, "scaled:scale"))
auto1_test$weight = scale(auto1_test$weight,
center = attr(auto1_train$weight, "scaled:center"),
scale = attr(auto1_train$weight, "scaled:scale"))
predictions <- knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
predictions = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
View(auto)
#require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
#trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
echo = TRUE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
library(dplyr)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
filter(in_train)
auto1_test <- auto %>%
filter(!in_train)
auto1_train$year = scale(auto1_train$year)
auto1_train$weight = scale(auto1_train$weight)
auto1_test$year = scale(auto1_test$year,
center = attr(auto1_train$year, "scaled:center"),
scale = attr(auto1_train$year, "scaled:scale"))
auto1_test$weight = scale(auto1_test$weight,
center = attr(auto1_train$weight, "scaled:center"),
scale = attr(auto1_train$weight, "scaled:scale"))
predictions = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
auto1_train$year
auto1_train$weight
auto1_test$weight
auto1_train <- auto %>%
select(weight, year) %>%
filter(in_train)
auto1_test <- auto %>%
select(weight, year) %>%
filter(!in_train)
auto1_train$year = scale(auto1_train$year)
auto1_train$weight = scale(auto1_train$weight)
auto1_test$year = scale(auto1_test$year,
center = attr(auto1_train$year, "scaled:center"),
scale = attr(auto1_train$year, "scaled:scale"))
auto1_test$weight = scale(auto1_test$weight,
center = attr(auto1_train$weight, "scaled:center"),
scale = attr(auto1_train$weight, "scaled:scale"))
predictions = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
MSE
3156+74+71+33
table(prediction, Auto$mpg[!in_train])
table(predictions, Auto$mpg[!in_train])
predictions
table(predictions, Auto$mpg[!in_train])
k_vals = seq(1, 50, by = 1)
accuracy = numeric(length = length(k_vals))
for(ii in 1:length(k_vals)){
prediction = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = k_vals[ii])
MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
}
library(ggformula)
gf_line(accuracy ~ k_vals, lwd = 1)
k_vals = seq(1, 50, by = 1)
accuracy = numeric(length = length(k_vals))
for(ii in 1:length(k_vals)){
prediction = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = k_vals[ii])
MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
}
gf_line(MSE ~ k_vals, lwd = 1)
gf_line(MSE ~ k_vals)
k_vals = seq(1, 50, by = 1)
for(ii in 1:length(k_vals)){
prediction = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = k_vals[ii])
MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
}
gf_line(MSE ~ k_vals)
k_vals = seq(1, 50, by = 1)
for(ii in 1:length(k_vals)){
prediction = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = k_vals[ii])
MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
}
gf_line(MSE ~ k_vals)
#require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
#trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
echo = TRUE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
library(dplyr)
library(ggformula)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
select(weight, year) %>%
filter(in_train)
auto1_test <- auto %>%
select(weight, year) %>%
filter(!in_train)
auto1_train$year = scale(auto1_train$year)
auto1_train$weight = scale(auto1_train$weight)
auto1_test$year = scale(auto1_test$year,
center = attr(auto1_train$year, "scaled:center"),
scale = attr(auto1_train$year, "scaled:scale"))
auto1_test$weight = scale(auto1_test$weight,
center = attr(auto1_train$weight, "scaled:center"),
scale = attr(auto1_train$weight, "scaled:scale"))
# predictions = knn.reg(train = auto1_train,
#                        test = auto1_test,
#                        y = Auto$mpg[in_train],
#                        k = 1)
#
# MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
# MSE
k_vals = seq(1, 50, by = 1)
for(ii in 1:length(k_vals)){
prediction = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = k_vals[ii])
MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
}
k_vals = seq(1, 50, by = 1)
for(ii in 1:length(k_vals)){
prediction = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = k_vals[ii])
MSE = mean((prediction$pred - Auto$mpg[!in_train])^2)
}
gf_line(MSE ~ k_vals)
predictions = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
MSE
predictions = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
MSE = mean((predictions$pred - Auto$mpg[!in_train])^2)
MSE
#There are problems here
k_vals = seq(1, 50, by = 1)
for(ii in 1:length(k_vals)){
prediction = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = k_vals[ii])
MSE = mean((prediction$pred - Auto$mpg[!in_train])^2)
}
gf_line(MSE ~ k_vals)
#There are problems here
k_vals = seq(1, 50, by = 1)
for(ii in 1:length(k_vals)){
prediction = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = k_vals[ii])
MSE[ii] = mean((prediction$pred - Auto$mpg[!in_train])^2)
}
gf_line(MSE ~ k_vals)
min(MSE)
gf_line(MSE ~ k_vals)
k_vals[which.min(MSE)]
min(MSE)
data = read_csv("Census Income.csv")
data = read_csv("Census_income.csv")
income = read_csv("Census_income.csv")
View(income)
income = read_csv("Census_income.csv")
income <- income %>%
mutate(Male = ifelse(Sex == Male, 1, 0))
income = read_csv("Census_income.csv")
income <- income %>%
mutate(is_Male = ifelse(Sex == Male, 1, 0))
income = read_csv("Census_income.csv")
income <- income %>%
mutate(is_Male = ifelse(Sex == "Male", 1, 0))
View(income)
income = read_csv("Census_income.csv")
income <- income %>%
mutate(Sex = ifelse(Sex == "Male", 1, 0))
View(income)
set.seed(1)
groups = c(rep(1, 20000), rep(2, 12561))
random_groups = sample(groups, 32561)
in_train = (random_groups == 1)
x_test <- income %>%
select(EducYears, Age, Sex) %>%
filter(!in_train)
x_train <- income %>%
select(EducYears, Age, Sex) %>%
filter(in_train)
x_train <- income %>%
select(EducYears, Age, Sex) %>%
filter(in_train)
x_test <- income %>%
select(EducYears, Age, Sex) %>%
filter(!in_train)
x_train$EducYears = scale(x_train$EducYears)
x_train$Age = scale(x_train$Age)
x_test$EducYears = scale(x_train$EducYears,
center = attr(x_train$EducYears, "scaled:center"),
scale = attr(x_train$EducYears, "scaled:scale"))
x_train <- income %>%
select(EducYears, Age, Sex) %>%
filter(in_train)
x_test <- income %>%
select(EducYears, Age, Sex) %>%
filter(!in_train)
x_train$EducYears = scale(x_train$EducYears)
x_train$Age = scale(x_train$Age)
x_test$EducYears = scale(x_test$EducYears,
center = attr(x_train$EducYears, "scaled:center"),
scale = attr(x_train$EducYears, "scaled:scale"))
x_test$Age = scale(x_test$Age,
center = attr(x_train$Age, "scaled:center"),
scale = attr(x_train, "scaled:scale"))
x_train <- income %>%
select(EducYears, Age, Sex) %>%
filter(in_train)
x_test <- income %>%
select(EducYears, Age, Sex) %>%
filter(!in_train)
x_train$EducYears = scale(x_train$EducYears)
x_train$Age = scale(x_train$Age)
x_test$EducYears = scale(x_test$EducYears,
center = attr(x_train$EducYears, "scaled:center"),
scale = attr(x_train$EducYears, "scaled:scale"))
x_test$Age = scale(x_test$Age,
center = attr(x_train$Age, "scaled:center"),
scale = attr(x_train$Age, "scaled:scale"))
#require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
#trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
echo = TRUE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
library(dplyr)
library(ggformula)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
select(weight, year) %>%
filter(in_train)
auto1_test <- auto %>%
select(weight, year) %>%
filter(!in_train)
auto1_train_std = scale(auto1_train[in_train, 1:2])
auto1_test = scale(auto1_test[!in_train, 1:2],
center = attr(auto1_train_std, "scaled:center"),
scale = attr(auto1_train_std, "scaled:scale"))
# #auto1_test$weight = scale(auto1_test$weight,
#                         center = attr(auto1_train$weight, "scaled:center"),
#                         scale = attr(auto1_train$weight, "scaled:scale"))
predictions = knn.reg(train = auto1_train,
test = auto1_test,
y = Auto$mpg[in_train],
k = 1)
library(ISLR)
library(dplyr)
library(ggformula)
auto <- (Auto)
set.seed(1)
groups = c(rep(1, 256), rep(2, 136))
random_groups = sample(groups, 392)
in_train = (random_groups == 1)
auto1_train <- auto %>%
select(weight, year) %>%
filter(in_train)
auto1_test <- auto %>%
select(weight, year) %>%
filter(!in_train)
auto1_train_std = scale(auto1_train[in_train, 1:2])
auto1_test_std = scale(auto1_test[!in_train, 1:2],
center = attr(auto1_train_std, "scaled:center"),
scale = attr(auto1_train_std, "scaled:scale"))
# #auto1_test$weight = scale(auto1_test$weight,
#                         center = attr(auto1_train$weight, "scaled:center"),
#                         scale = attr(auto1_train$weight, "scaled:scale"))
predictions = knn.reg(train = auto1_train_std,
test = auto1_test_std,
y = Auto$mpg[in_train],
k = 1)
View(auto1_train)
View(auto1_train_std)
View(auto1_test_std)
?cbind
